'use strict'

// 1

// Выводится значение true, так как свойство jumps было установлено в объекте rabbit.
// Выводится значение null, так как свойство jumps было удалено из объекта rabbit, но оно осталось в его прототипе animal.
// Выводится значение undefined, так как свойство jumps было удалено из объекта animal, который является прототипом объекта rabbit,
// и теперь нет свойства jumps ни в объекте rabbit, ни в его прототипе.

// 2

pockets.proto = bed;
bed.proto = table;
table.proto = head;

// Таким образом, при поиске свойства сначала будет проверяться объект pockets, затем bed, затем table, и наконец head.
// Чтобы получить значение свойства glasses, быстрее будет использовать head.glasses, так как это свойство находится в самом объекте head и будет найдено без прохождения по цепочке прототипов.
// В то же время, при использовании pockets.glasses придется пройти всю цепочку прототипов до объекта head, что потребует дополнительных вычислительных ресурсов.

// 3

// Ответ: rabbit.
// Поскольку this – это объект, который стоит перед точкой, rabbit.eat() изменяет объект rabbit.
// Поиск свойства и исполнение кода – два разных процесса.
// Сначала осуществляется поиск метода rabbit.eat в прототипе, а затем этот метод выполняется с this=rabbit.

// 4

let hamster = {
  eat(food) {
    if (!this.stomach) {
      this.stomach = []; // создаем массив stomach, если его еще нет
    }
    this.stomach.push(food);
  }
};

let speedy = {
  __proto__: hamster
};

let lazy = {
  __proto__: hamster
};
